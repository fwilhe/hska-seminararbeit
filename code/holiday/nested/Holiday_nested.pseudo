def doBookAccommodation(rate: Double): Future[Boolean] = {
  println("Got exchange-rate. It is " + rate)
  if (isExchangeRateAcceptable(rate)) {
    println("Book accommodation")
    bookAccommodationOnline()
  } else {
    throw new Exception("Rate not acceptable")
  }
}

def doBookFlight(bookAccommodation: Future[Boolean]) {
  bookAccommodation.onComplete {
    case Success(_) =>  {
      println("Accommodation booked")
      val bookFlight = future{
        println("Book flight")
        bookFlightOnline()        
      }
      bookFlight.onComplete {
        case Success(_) => println("Flight booked")
        case Failure(ex) => println(ex.getMessage)
      }
    }
    case Failure(ex) => println(ex.getMessage)
  }
}

def main() { 
  val rateDollar: Future[Double] = 
    getExchangeRateByFuture("US-Dollar")
    
  val rateFranc: Future[Double] = 
    getExchangeRateByFuture("Swiss franc")
    
  rateDollar.onComplete {
    // US-$
    case Success(rate) => {
      val bookAccommodation = doBookAccommodation(rate)
      doBookFlight(bookAccommodation)
    }
    
    // Swiss franc
    case Failure(ex) => {
      rateFranc.onComplete {
        case Success(rate) => {
          val bookAccommodation = doBookAccommodation(rate)
          doBookFlight(bookAccommodation)
        }
        case Failure(ex) => println(ex.getMessage)
      }
    }
  }
 
  // do some unrelated work
  packSuitcase()
}

